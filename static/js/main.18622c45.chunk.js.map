{"version":3,"sources":["images/no_cover_available.png","icons/left.svg","ChangeShelfButton.js","Book.js","Shelf.js","Shelves.js","BooksAPI.js","SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChangeShelfButton","state","moved","moveShelf","e","props","onMove","book","target","value","setState","this","books","shelves","defaultShelf","b","id","shelf","className","onChange","defaultValue","disabled","map","key","title","Component","Book","src","imageLinks","thumbnail","BlankCover","alt","authors","join","Shelf","Shelves","booksByShelf","filter","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","fetch","method","body","JSON","stringify","then","res","json","search","query","data","SearchPage","results","catchError","filterBooks","forEach","shelvedBooks","searchResults","q","BooksAPI","trim","length","updateQuery","catchErr","type","placeholder","App","error","handleMove","response","prevState","concat","catch","console","log","path","render","to","Back","exact","action","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18622c45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_cover_available.dee850f9.png\";","module.exports = __webpack_public_path__ + \"static/media/left.6c7df99d.svg\";","import React, { Component } from \"react\";\n\nclass ChangeShelfButton extends Component {\n  state = {\n    moved: false\n  };\n  moveShelf = e => {\n    this.props.onMove(this.props.book, e.target.value);\n    this.setState({ moved: !this.state.moved });\n  };\n\n  render() {\n    const { book, books, shelves } = this.props;\n    let defaultShelf = \"none\";\n\n    for (let b of books) {\n      if (b.id === book.id) {\n        defaultShelf = b.shelf;\n        break;\n      }\n    }\n\n    return (\n      <div className=\"shelf-menu-btn\">\n        <select onChange={this.moveShelf} defaultValue={defaultShelf}>\n          <option value=\"none\" disabled>\n            Move to...\n          </option>\n          {shelves.map((shelf, id) => (\n            <option key={id} value={shelf.value}>\n              {shelf.title}\n            </option>\n          ))}\n          {book.shelf !== \"none\" && <option value=\"none\">Remove</option>}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default ChangeShelfButton;\n","import React from \"react\";\nimport ChangeShelfButton from \"./ChangeShelfButton\";\nimport BlankCover from \"./images/no_cover_available.png\";\n\nconst Book = props => (\n  <div className=\"book\">\n    <div className=\"imgcont\">\n      <ChangeShelfButton\n        key={props.book.id} //important\n        book={props.book}\n        books={props.books}\n        onMove={props.onMove}\n        shelves={props.shelves}\n      />\n      <img\n        src={\n          props.book.imageLinks && props.book.imageLinks.thumbnail\n            ? props.book.imageLinks.thumbnail\n            : BlankCover\n        }\n        alt={props.book.title ? props.book.title : \"Untitled\"}\n      />\n    </div>\n\n    <h5>{props.book.title ? props.book.title : \"No Title Available\"}</h5>\n    <h6>\n      {props.book.authors\n        ? props.book.authors.join(\", \")\n        : \"No Authors Available\"}\n    </h6>\n  </div>\n);\n\nexport default Book;\n","import React from \"react\";\nimport Book from \"./Book\";\n\nconst Shelf = props => (\n  <div className=\"shelf\">\n    {props.shelf.title && (\n      <div>\n        <h2 className=\"shelf-title\">{props.shelf.title}</h2>\n      </div>\n    )}\n    <div className=\"shelf-books\">\n      {props.books.map((b, id) => (\n        <Book\n          key={id}\n          book={b}\n          books={props.books}\n          onMove={props.onMove}\n          shelves={props.shelves}\n        />\n      ))}\n    </div>\n  </div>\n);\n\nexport default Shelf;\n","import React from \"react\";\nimport Shelf from \"./Shelf\";\n\nconst Shelves = props => (\n  <div className=\"shelves\">\n    {props.shelves.map((shelf, id) => {\n      const booksByShelf = props.books.filter(b => b.shelf === shelf.value);\n      return (\n        <Shelf\n          key={id}\n          shelves={props.shelves}\n          shelf={shelf}\n          books={booksByShelf}\n          onMove={props.onMove}\n        />\n      );\n    })}\n  </div>\n);\n\nexport default Shelves;\n","const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json());\n\nexport const search = query =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ query })\n  })\n    .then(res => res.json())\n    .then(data => data.books);\n","import React, { Component } from \"react\";\nimport * as BooksAPI from \"./BooksAPI.js\";\nimport Shelf from \"./Shelf\";\n\nclass SearchPage extends Component {\n  state = {\n    query: \"\",\n    results: [],\n    catchError: false\n  };\n\n  // Filters the search results so that\n  // the shelf is selected if applicable.\n  filterBooks = books => {\n    books.forEach(book => {\n      for (let b of this.props.shelvedBooks) {\n        if (book.id === b.id) {\n          book.shelf = b.shelf;\n          break;\n        } else {\n          book.shelf = \"none\";\n        }\n      }\n    });\n    return books;\n  };\n\n  searchResults = q => {\n    BooksAPI.search(q.trim()).then(books => {\n      if (q === this.state.query) {\n        if (books && books.length > 0) {\n          this.setState({\n            results: this.props.shelvedBooks ? this.filterBooks(books) : books,\n            catchError: false\n          });\n        } else {\n          this.setState({ results: [], catchError: true });\n        }\n      }\n    });\n  };\n  updateQuery = e => {\n    this.setState(() => ({\n      query: e\n    }));\n    if (e) {\n      this.searchResults(e);\n    } else {\n      this.setState({ results: [], catchErr: false });\n    }\n  };\n  render() {\n    const { query, results, catchError } = this.state;\n    const { shelves } = this.props;\n    return (\n      <div id=\"search-pg\">\n        <input\n          id=\"search-bar\"\n          type=\"text\"\n          value={query}\n          placeholder=\"Search for books\"\n          onChange={e => this.updateQuery(e.target.value)}\n        />\n        <div className=\"shelves\">\n          <div className=\"shelf\">\n            {results && results.length > 0 && <h3>{results.length} Results</h3>}\n            <div className=\"shelf-books\">\n              <div className=\"imgcont\">\n                <Shelf\n                  shelf=\"Search Results\"\n                  books={results}\n                  shelves={shelves}\n                  onMove={this.props.onMove}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {catchError && (\n          <h3>Your search - \"{query}\" - did not match with any books.</h3>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React, { Component } from \"react\";\nimport Shelves from \"./Shelves\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Route, Link, Switch } from \"react-router-dom\";\nimport SearchPage from \"./SearchPage\";\nimport \"./css/app.css\";\nimport Back from \"./icons/left.svg\";\n\nclass App extends Component {\n  state = {\n    books: [],\n    shelves: [\n      { value: \"currentlyReading\", title: \"Currently Reading\" },\n      { value: \"wantToRead\", title: \"Want to Read\" },\n      { value: \"read\", title: \"Read\" }\n    ],\n    error: false\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then(books => this.setState({ books }))\n      .catch(() => this.setState({ error: true }));\n  }\n\n  handleMove = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n      .then(response => {\n        book.shelf = shelf;\n        this.setState(prevState => ({\n          books: prevState.books.filter(b => b.id !== book.id).concat(book)\n        }));\n      })\n      .catch(() => this.setState({ error: true }));\n  };\n\n  render() {\n    if (this.state.error) {\n      return <p>Please try again later.</p>;\n    }\n    console.log(this.state.books);\n    return (\n      <div id=\"maincontainer\">\n        <div id=\"header\">\n          <Switch>\n            <Route\n              path=\"/search\"\n              render={() => (\n                <Link to=\"/\">\n                  <img id=\"back\" src={Back} alt=\"back\" />\n                </Link>\n              )}\n            />\n            <Route exact path=\"/\" render={() => <div id=\"empty\"></div>} />\n          </Switch>\n          <Link to=\"/\">\n            <h1>MyReads</h1>\n          </Link>\n          <div id=\"empty\"></div>\n        </div>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <div>\n                <Shelves\n                  books={this.state.books}\n                  onMove={this.handleMove}\n                  shelves={this.state.shelves}\n                />\n                <form action=\"/search\">\n                  <button id=\"search-btn\" type=\"submit\">\n                    +\n                  </button>\n                </form>\n              </div>\n            )}\n          />\n          <Route\n            path=\"/search\"\n            render={() => (\n              <SearchPage\n                shelves={this.state.shelves}\n                onMove={this.handleMove}\n                shelvedBooks={this.state.books}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}